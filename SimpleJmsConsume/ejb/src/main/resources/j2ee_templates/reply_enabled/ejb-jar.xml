<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright Â© 2016 - 2018 Software AG, Darmstadt, Germany and/or its licensors
  ~
  ~ SPDX-License-Identifier: Apache-2.0
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<ejb-jar
        xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                            http://java.sun.com/xml/ns/javaee/ejb-jar_3_1.xsd"
        version="3.1">
    <!--
    IMPORTANT: FILE overwritten from following folder: <project.dir>/resource_templates/reply_enabled
    IF you need to modify the reply-enabled descriptor, modify the source file <project.dir>/resource_templates/reply_enabled
    -->
    <description>Partial deployment descriptors</description>
    <display-name>Partial deployment descriptors</display-name>
    <enterprise-beans>
        <message-driven>
            <ejb-name>MessageConsumerService</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.MessageConsumerServiceBean</ejb-class>
            <env-entry>
                <env-entry-name>jmsMessageEnableReply</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Env.jmsMessageEnableReply}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>jmsMessageReplyOverridesDefault</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Env.jmsMessageReplyOverridesDefault}</env-entry-value>
            </env-entry>
            <ejb-local-ref>
                <ejb-ref-name>ejb/messageProcessor</ejb-ref-name>
                <ejb-ref-type>Session</ejb-ref-type>
                <local>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.MessageProcessorLocal</local>
                <ejb-link>${Consumer.Processors.BindingName}</ejb-link>
                <injection-target>
                    <injection-target-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.MessageConsumerServiceBean</injection-target-class>
                    <injection-target-name>messageProcessor</injection-target-name>
                </injection-target>
            </ejb-local-ref>
            <resource-ref>
                <description>The Connection Factory for Message Replies</description>
                <res-ref-name>jms/someManagedReplyCF</res-ref-name>
                <res-type>javax.jms.ConnectionFactory</res-type>
            </resource-ref>
            <resource-ref>
                <description>The Connection Factory for Message Replies</description>
                <res-ref-name>jms/someManagedDefaultReplyTo</res-ref-name>
                <res-type>javax.jms.Destination</res-type>
            </resource-ref>
        </message-driven>
        <session>
            <ejb-name>CounterService</ejb-name>
            <business-local>com.softwareaggov.messaging.libs.utils.Counter</business-local>
            <ejb-class>com.softwareaggov.messaging.libs.utils.impl.CounterImpl</ejb-class>
            <session-type>Singleton</session-type>
            <concurrency-management-type>Bean</concurrency-management-type>
        </session>
        <session>
            <ejb-name>MockSleepProcessor</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.MockSleepBean</ejb-class>
            <env-entry>
                <env-entry-name>mockSleepTimeInMillis</env-entry-name>
                <env-entry-type>java.lang.Long</env-entry-type>
                <env-entry-value>${Consumer.Processors.MockSleepProcessor.Env.mockSleepTimeInMillis}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>enableCloneProcessing</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Processors.MockSleepProcessor.Env.enableCloneProcessing}</env-entry-value>
            </env-entry>
        </session>
        <session>
            <ejb-name>MockSleepAndExceptionsProcessor</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.MockSleepAndExceptionsBean
            </ejb-class>
            <env-entry>
                <env-entry-name>mockSleepTimeInMillis</env-entry-name>
                <env-entry-type>java.lang.Long</env-entry-type>
                <env-entry-value>${Consumer.Processors.MockSleepAndExceptionsProcessor.Env.mockSleepTimeInMillis}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>mockExceptionsCountInterval</env-entry-name>
                <env-entry-type>java.lang.Integer</env-entry-type>
                <env-entry-value>${Consumer.Processors.MockSleepAndExceptionsProcessor.Env.mockExceptionsCountInterval}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>enableCloneProcessing</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Processors.MockSleepAndExceptionsProcessor.Env.enableCloneProcessing}</env-entry-value>
            </env-entry>
        </session>
        <session>
            <ejb-name>MessageCloneProcessor</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.MessageCloneBean
            </ejb-class>
            <env-entry>
                <env-entry-name>overwritePayloadEnabled</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.overwritePayloadEnabled}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>msgPayloadOverride</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.msgPayloadOverride}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>msgPayloadOverrideFilePath</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.msgPayloadOverrideFilePath}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>overwritePropertiesEnabled</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.overwritePropertiesEnabled}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>msgPropertiesOverride</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.msgPropertiesOverride}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>mergePropertiesEnabled</env-entry-name>
                <env-entry-type>java.lang.Boolean</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageCloneProcessor.Env.mergePropertiesEnabled}</env-entry-value>
            </env-entry>
        </session>
        <session>
            <ejb-name>NoopProcessor</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.NoopBean</ejb-class>
        </session>
        <session>
            <ejb-name>MessageInteropClientProcessor</ejb-name>
            <ejb-class>com.softwareaggov.messaging.simplejmsconsume.ejb.subscribe.processor.MessageInteropClientBean</ejb-class>
            <env-entry>
                <env-entry-name>jndi.ejblookup.initialContextFactory</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageInteropClientProcessor.EJB.JndiLookup.InitialContextFactory}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>jndi.ejblookup.urlPackagePrefix</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageInteropClientProcessor.EJB.JndiLookup.UrlPackagePrefix}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>jndi.ejblookup.url</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageInteropClientProcessor.EJB.JndiLookup.Url}</env-entry-value>
            </env-entry>
            <env-entry>
                <env-entry-name>jndi.ejblookup.bindingname</env-entry-name>
                <env-entry-type>java.lang.String</env-entry-type>
                <env-entry-value>${Consumer.Processors.MessageInteropClientProcessor.EJB.JndiLookup.BindingName}</env-entry-value>
            </env-entry>
        </session>
    </enterprise-beans>
</ejb-jar>