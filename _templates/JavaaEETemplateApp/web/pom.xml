<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright Â© 2016 - 2018 Software AG, Darmstadt, Germany and/or its licensors
  ~
  ~ SPDX-License-Identifier: Apache-2.0
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>JavaaEETemplateApp</artifactId>
        <groupId>com.softwareaggov.messaging</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>JavaaEETemplateApp-web</artifactId>
    <packaging>war</packaging>
    <name>${project.parent.artifactId} web packaging</name>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>

    <dependencies>
        <!-- Client Dependency on the EJB module so we can use its services if needed -->
        <!-- Important: scope must be provided because the EJB client API must not be embedded in the WAR since it's already in the EAR/lib
         otherwise issues with reflections -->
        <dependency>
            <groupId>${project.parent.groupId}</groupId>
            <artifactId>${project.parent.artifactId}-ejb</artifactId>
            <type>ejb-client</type>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>com.softwareaggov.messaging</groupId>
            <artifactId>libs</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.ejb</groupId>
            <artifactId>javax.ejb-api</artifactId>
            <version>3.2</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.jms</groupId>
            <artifactId>jms-api</artifactId>
            <version>1.1-rev-1</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>2.6</version>
                <configuration>
                    <useCache>true</useCache>
                    <failOnMissingWebXml>false</failOnMissingWebXml>
                </configuration>
                <executions>
                    <execution>
                        <!-- explode the future war content for pre-package processing -->
                        <id>prepare-war</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>exploded</goal>
                        </goals>
                        <!--<configuration>-->
                        <!--<webappDirectory>${project.build.directory}/${project.build.finalName}-tmp</webappDirectory>-->
                        <!--</configuration>-->
                    </execution>
                    <!--<execution>-->
                    <!--&lt;!&ndash; use the same execution id to further configure the default binding and execution &ndash;&gt;-->
                    <!--<id>default-war</id>-->
                    <!--<phase>package</phase>-->
                    <!--<goals>-->
                    <!--<goal>war</goal>-->
                    <!--</goals>-->
                    <!--<configuration>-->
                    <!--&lt;!&ndash; during the package phase, use the processed web.xml file &ndash;&gt;-->
                    <!--<webXml>${project.build.directory}/${project.build.finalName}-tmp/WEB-INF/web.xml</webXml>-->
                    <!--</configuration>-->
                    <!--</execution>-->
                </executions>
            </plugin>
            <plugin>
                <groupId>com.google.code.maven-replacer-plugin</groupId>
                <artifactId>replacer</artifactId>
                <version>1.5.2</version>
                <executions>
                    <execution>
                        <!-- apply pre-package processing on web resources -->
                        <id>process-web-resources</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>replace</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <file>${project.build.directory}/${project.build.finalName}/WEB-INF/web.xml</file>
                    <token>@@displayname@@</token>
                    <value>${project.build.finalName}</value>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>